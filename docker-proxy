#!/usr/bin/env bash

set -e -o pipefail

BIN_NAME=$(basename $0)
VERSION="1.0.0"

usage() {
    echo "
$BIN_NAME $VERSION.

Usage:
  $BIN_NAME status      Prints the status of the docker proxy.
  $BIN_NAME start       Starts the docker proxy.
  $BIN_NAME stop        Stops the docker proxy.
  $BIN_NAME restart     Restarts the docker proxy.
  $BIN_NAME update      Pulls the latest image for the docker proxy container.
  $BIN_NAME help        Show this message.
  $BIN_NAME version     Print the version number.
"
}

version() {
    echo "$VERSION"
}

status() {
    echo "
    Docker:     running
    Image:      $(proxy_image_exists && echo 'downloaded')$(proxy_image_exists || echo 'not found')
    Container:  $(container_status)
"
}

start() {
    if [ "$(container_status)" == "running" ]; then
        echo "Proxy is already running."
        exit 0;
    fi

    if ! proxy_image_exists; then
        echo -e 'Proxy image not found.  Pulling image...\n'
        pull_latest_proxy_image
    fi

    echo 'Staring container...'
    if [ "$(container_status)" == "not found" ]; then
        docker run -d --restart=always -v /var/run/docker.sock:/tmp/docker.sock:ro -p 80:80 -p 443:443 -p 19322:19322/udp -e CONTAINER_NAME=http-proxy --name http-proxy codekitchen/dinghy-http-proxy 1> /dev/null
    else
        docker start http-proxy 1> /dev/null
    fi

    if ! resolver_file_exists; then
        echo '/etc/resolver/docker does not exist. Creating... (this will prompt for password)'
        create_or_update_resolver_file
    fi

    if ! resolver_file_up_to_date; then
        echo '/etc/resolver/docker is out of date. Updating... (this will prompt for password)'
        create_or_update_resolver_file
    fi
}

stop() {
    if [ "$(container_status)" != "running" ]; then
        echo "Proxy is not running."
        exit 0;
    fi

    echo 'Stopping the proxy container...'
    docker stop http-proxy 1> /dev/null
}

restart() {
    stop
    start
}

update() {
    echo -e "Pulling latest proxy image...\n"
    pull_latest_proxy_image
}


########### Helper Functions ###########

docker_is_running() {
    docker info &> /dev/null
}

proxy_image_exists() {
    [ "$(docker images codekitchen/dinghy-http-proxy | wc -l)" -eq "2" ]
}

pull_latest_proxy_image() {
    docker pull codekitchen/dinghy-http-proxy:latest
}

container_status() {
    docker inspect --format='{{.State.Status}}' http-proxy 2> /dev/null | sed '/^$/d' || echo 'not found'
}

generate_resolver_file() {
    echo "# Generated by docker-proxy

nameserver 127.0.0.1
port 19322
"
}

resolver_file_exists() {
    [ -f "/etc/resolver/docker" ]
}

resolver_file_up_to_date() {
    diff -q /etc/resolver/docker <(generate_resolver_file) 1> /dev/null
}

create_or_update_resolver_file() {
    sudo mkdir -p /etc/resolver

    generate_resolver_file | sudo tee /etc/resolver/docker 1> /dev/null
    sudo killall -HUP mDNSResponder
}


case $1 in
    help|-h|--help)
        usage
        exit 0
    ;;

    version|--version)
        version
        exit 0
    ;;

    status|start|stop|restart|update)
        if ! docker_is_running; then
            echo "Cannot connect to the Docker daemon. Is the docker daemon running on this host?"
            exit 1
        fi

        $1
    ;;

    *)
        usage
        exit 1
    ;;
esac
